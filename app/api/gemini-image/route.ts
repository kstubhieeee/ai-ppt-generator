import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from "@google/genai";

// This API generates images using Google's Gemini API
export async function POST(request: NextRequest) {
  try {
    const { searchTerm } = await request.json();
    
    if (!searchTerm) {
      return NextResponse.json({ error: 'Search term is required' }, { status: 400 });
    }

    // Clean and prepare the search term
    const cleanTerm = searchTerm.trim();
    console.log(`Generating image for term: "${cleanTerm}"`);
    
    // Get API key from environment variable
    const apiKey = process.env.GEMINI_API_KEY;
    
    // Check if API key is available
    if (!apiKey) {
      console.log('Gemini API key not found, returning placeholder image');
      return generatePlaceholder(cleanTerm);
    }
    
    try {
      // Initialize the Gemini API client
      const ai = new GoogleGenAI({ apiKey });
      
      // Create a prompt for the image generation
      const prompt = `Create a professional presentation quality image representing: ${cleanTerm}. 
      Make it visually appealing and suitable for a business presentation.`;
      
      // Generate an image using Gemini
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash-exp-image-generation",
        contents: prompt,
        config: {
          responseModalities: ["Text", "Image"],
        },
      });
      
      // Extract image data
      let imageUrl = null;
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          imageUrl = `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
          break;
        }
      }
      
      if (imageUrl) {
        return NextResponse.json({
          imageUrl,
          searchTerm: cleanTerm,
          isGenerated: true
        });
      } else {
        // If no image was generated, fall back to placeholder
        console.log('No image was generated by Gemini, falling back to placeholder');
        return generatePlaceholder(cleanTerm);
      }
    } catch (genaiError) {
      console.error('Error generating image with Gemini:', genaiError);
      // Fall back to placeholder on error
      return generatePlaceholder(cleanTerm);
    }
  } catch (error) {
    console.error('Error in image generation API:', error);
    return NextResponse.json({ 
      error: 'Failed to generate image',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// Helper function to generate a placeholder image URL
function generatePlaceholder(searchTerm: string) {
  // Generate a timestamp to prevent caching
  const timestamp = new Date().getTime();
  
  // Define theme colors (match with the presentation component)
  const themes = [
    { bgColor: '#f0f9ff', textColor: '#0c4a6e' }, // Blue
    { bgColor: '#f0fdf4', textColor: '#14532d' }, // Green
    { bgColor: '#fef2f2', textColor: '#7f1d1d' }, // Red
    { bgColor: '#faf5ff', textColor: '#581c87' }, // Purple
  ];
  
  // Choose a theme based on the first character of the search term (for consistency)
  const themeIndex = searchTerm.charCodeAt(0) % themes.length;
  const theme = themes[themeIndex];
  
  // Create a placeholder URL
  const placeholderUrl = `https://placehold.co/800x600/${theme.bgColor.replace('#', '')}/${theme.textColor.replace('#', '')}?text=${encodeURIComponent(searchTerm)}&t=${timestamp}`;
  
  return NextResponse.json({
    imageUrl: placeholderUrl,
    searchTerm: searchTerm,
    timestamp: timestamp,
    isGenerated: false
  });
} 